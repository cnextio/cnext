name: Build

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
    paths-ignore:
      - 'README.md'
      - 'LICENSE'

  pull_request:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'LICENSE'

env:
  BASE_DEV_VERSION: 1.0.0

jobs:

  dump_contexts_to_log:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        id: github_context_step
        run: echo '${{ toJSON(github) }}'
      - name: Dump job context
        run: echo '${{ toJSON(job) }}'
      - name: Dump steps context
        run: echo '${{ toJSON(steps) }}'
      - name: Dump runner context
        run: echo '${{ toJSON(runner) }}'
      - name: Dump strategy context
        run: echo '${{ toJSON(strategy) }}'
      - name: Dump matrix context
        run: echo '${{ toJSON(matrix) }}'

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set Build Variables
        run: |
          if [[ "$GITHUB_REF" =~ ^refs/tags/v* ]]; then
            echo "Using TAG mode: $GITHUB_REF_NAME"
            echo "REL_VERSION=$GITHUB_REF_NAME" >> $GITHUB_ENV
            echo "REL_VERSION_STRICT=${GITHUB_REF_NAME#?}" >> $GITHUB_ENV
          else
            echo "Using BRANCH mode: v$BASE_DEV_VERSION-dev+$GITHUB_RUN_NUMBER"
            echo "REL_VERSION=v$BASE_DEV_VERSION-dev+$GITHUB_RUN_NUMBER" >> $GITHUB_ENV
            echo "REL_VERSION_STRICT=$BASE_DEV_VERSION-dev+$GITHUB_RUN_NUMBER" >> $GITHUB_ENV
          fi

      - name: Set Version
        run: |
          curl -sSLf "$(curl -sSLf https://api.github.com/repos/tomwright/dasel/releases/latest | grep browser_download_url | grep linux_amd64 | grep -v .gz | cut -d\" -f 4)" -L -o dasel && chmod +x dasel
          mv ./dasel /usr/local/bin/dasel
          dasel put string -f pyproject.toml .tool.poetry.version "$REL_VERSION_STRICT"
          cat pyproject.toml

      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'
          cache-dependency-path: |
            cnext_app/package-lock.json
            cnext_server/server/package-lock.json

      - name: Install dependencies
        working-directory: ./cnext_app
        run: npm ci

      - name: Install dependencies
        working-directory: ./cnext_server/server
        run: npm ci

      - name: Test 1
        run: ls -la cnext_app/.next/cache

      - name: Cache Next.js
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/cnext_app/.next/cache
          key: ${{ runner.os }}-app-${{ hashFiles('cnext_app/**/*.[jt]s', 'cnext_app/**/*.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-app-

      - name: Test
        run: ls -la cnext_app/.next/cache

      - name: Build IDE
        working-directory: ./cnext_app
        run: npm run build

      - name: Install poetry
        run: pipx install poetry

      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'poetry'

      - name: Install dependencies
        working-directory: ./cnext_server/server
        run: |
          poetry env use 3.9
          poetry install

      - name: Copy output
        run: cp -rf ./cnext_app/out ./cnext_server/public

      # - name: Cypress run
      #   uses: cypress-io/github-action@v4
      #   env:
      #     CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
      #   with:
      #     record: true
      #     working-directory: cnext_app/tests/intergration
      #     browser: chrome
      #     start: |
      #       npm run  --prefix ../../../cnext_server/server start
      #     spec: |
      #       cypress/**/*.spec.js

      - name: Build project for distribution
        run: poetry build

      - name: Publish to PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
        run: poetry publish

      # - name: Notify Slack Releases Channel
      #   if: startsWith(github.ref, 'refs/tags/v')
      #   uses: slackapi/slack-github-action@v1.19.0
      #   with:
      #     payload: |
      #       {
      #         "text": "CNext ${{ github.ref_name }} has been released."
      #       }
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      #     SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  # test-install:
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest, macos-latest]
  #       # os: [ubuntu-latest, windows-latest, macos-latest]
  #       # python-version: ["3.9", "3.10"]
  #       python-version: ["3.9"]
  #   runs-on: ${{ matrix.os }}
  #   needs: build
  #   name: ${{ matrix.os }} Python ${{ matrix.python-version }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Download Dasel
  #       if: matrix.os == 'ubuntu-latest'
  #       run: |
  #         curl -sSLf "$(curl -sSLf https://api.github.com/repos/tomwright/dasel/releases/latest | grep browser_download_url | grep linux_amd64 | grep -v .gz | cut -d\" -f 4)" -L -o dasel && chmod +x dasel
  #         mv ./dasel /usr/local/bin/dasel

  #     - name: Download Dasel
  #       if: matrix.os == 'macos-latest'
  #       run: |
  #         curl -sSLf "$(curl -sSLf https://api.github.com/repos/tomwright/dasel/releases/latest | grep browser_download_url | grep -v .gz | grep darwin_amd64 | cut -d\" -f 4)" -L -o dasel && chmod +x dasel
  #         mv ./dasel /usr/local/bin/dasel

  #     - name: Download Dasel
  #       if: matrix.os == 'windows-latest'
  #       run: |
  #         scoop bucket add extras
  #         scoop install dasel

  #     - name: Get version
  #       id: version
  #       run: echo "::set-output name=version::$(dasel select -f pyproject.toml .tool.poetry.version)"

  #     - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #         cache: 'pip'

  #     - name: Install CNext
  #       run: pip install cnext-test1==${{ steps.version.outputs.version }}

  #     - name: Init CNext
  #       run: echo "n" | cnext-init

  #     - name: Run CNext
  #       run: |
  #         cnext-run &
